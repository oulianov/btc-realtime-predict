Help on SARIMAXResultsWrapper in module statsmodels.tsa.statespace.sarimax object:

class SSAARRIIMMAAXXRReessuullttssWWrraappppeerr(statsmodels.tsa.statespace.mlemodel.MLEResultsWrapper)
 |  Class which wraps a statsmodels estimation Results class and steps in to
 |  reattach metadata to results (if available)
 |  
 |  Method resolution order:
 |      SARIMAXResultsWrapper
 |      statsmodels.tsa.statespace.mlemodel.MLEResultsWrapper
 |      statsmodels.base.wrapper.ResultsWrapper
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  ccoonnff__iinntt(self, alpha=0.05, cols=None, method='default')
 |      conf_int(self, alpha=0.05, cols=None, method='default')
 |      
 |      Returns the confidence interval of the fitted parameters.
 |      
 |      Parameters
 |      ----------
 |      alpha : float, optional
 |          The significance level for the confidence interval.
 |          ie., The default `alpha` = .05 returns a 95% confidence interval.
 |      cols : array-like, optional
 |          `cols` specifies which confidence intervals to return
 |      method : string
 |          Not Implemented Yet
 |          Method to estimate the confidence_interval.
 |          "Default" : uses self.bse which is based on inverse Hessian for MLE
 |          "hjjh" :
 |          "jac" :
 |          "boot-bse"
 |          "boot_quant"
 |          "profile"
 |      
 |      
 |      Returns
 |      -------
 |      conf_int : array
 |          Each row contains [lower, upper] limits of the confidence interval
 |          for the corresponding parameter. The first column contains all
 |          lower, the second column contains all upper limits.
 |      
 |      Examples
 |      --------
 |      >>> import statsmodels.api as sm
 |      >>> data = sm.datasets.longley.load(as_pandas=False)
 |      >>> data.exog = sm.add_constant(data.exog)
 |      >>> results = sm.OLS(data.endog, data.exog).fit()
 |      >>> results.conf_int()
 |      array([[-5496529.48322745, -1467987.78596704],
 |             [    -177.02903529,      207.15277984],
 |             [      -0.1115811 ,        0.03994274],
 |             [      -3.12506664,       -0.91539297],
 |             [      -1.5179487 ,       -0.54850503],
 |             [      -0.56251721,        0.460309  ],
 |             [     798.7875153 ,     2859.51541392]])
 |      
 |      
 |      >>> results.conf_int(cols=(2,3))
 |      array([[-0.1115811 ,  0.03994274],
 |             [-3.12506664, -0.91539297]])
 |      
 |      Notes
 |      -----
 |      The confidence interval is based on the standard normal distribution.
 |      Models wish to use a different distribution should overwrite this
 |      method.
 |  
 |  ccoovv__ppaarraammss(self, r_matrix=None, column=None, scale=None, cov_p=None, other=None)
 |      cov_params(self, r_matrix=None, column=None, scale=None, cov_p=None, other=None)
 |      
 |      Returns the variance/covariance matrix.
 |      
 |      The variance/covariance matrix can be of a linear contrast
 |      of the estimates of params or all params multiplied by scale which
 |      will usually be an estimate of sigma^2.  Scale is assumed to be
 |      a scalar.
 |      
 |      Parameters
 |      ----------
 |      r_matrix : array-like
 |          Can be 1d, or 2d.  Can be used alone or with other.
 |      column :  array-like, optional
 |          Must be used on its own.  Can be 0d or 1d see below.
 |      scale : float, optional
 |          Can be specified or not.  Default is None, which means that
 |          the scale argument is taken from the model.
 |      other : array-like, optional
 |          Can be used when r_matrix is specified.
 |      
 |      Returns
 |      -------
 |      cov : ndarray
 |          covariance matrix of the parameter estimates or of linear
 |          combination of parameter estimates. See Notes.
 |      
 |      Notes
 |      -----
 |      (The below are assumed to be in matrix notation.)
 |      
 |      If no argument is specified returns the covariance matrix of a model
 |      ``(scale)*(X.T X)^(-1)``
 |      
 |      If contrast is specified it pre and post-multiplies as follows
 |      ``(scale) * r_matrix (X.T X)^(-1) r_matrix.T``
 |      
 |      If contrast and other are specified returns
 |      ``(scale) * r_matrix (X.T X)^(-1) other.T``
 |      
 |      If column is specified returns
 |      ``(scale) * (X.T X)^(-1)[column,column]`` if column is 0d
 |      
 |      OR
 |      
 |      ``(scale) * (X.T X)^(-1)[column][:,column]`` if column is 1d
 |  
 |  ffoorreeccaasstt(self, steps=1, **kwargs)
 |      forecast(self, steps=1, **kwargs)
 |      
 |      Out-of-sample forecasts
 |      
 |      Parameters
 |      ----------
 |      steps : int, str, or datetime, optional
 |          If an integer, the number of steps to forecast from the end of the
 |          sample. Can also be a date string to parse or a datetime type.
 |          However, if the dates index does not have a fixed frequency, steps
 |          must be an integer. Default
 |      **kwargs
 |          Additional arguments may required for forecasting beyond the end
 |          of the sample. See `FilterResults.predict` for more details.
 |      
 |      Returns
 |      -------
 |      forecast : array
 |          Array of out of sample forecasts. A (steps x k_endog) array.
 |  
 |  iimmppuullssee__rreessppoonnsseess(self, steps=1, impulse=0, orthogonalized=False, cumulative=False, **kwargs)
 |      impulse_responses(self, steps=1, impulse=0, orthogonalized=False, cumulative=False, **kwargs)
 |      
 |      Impulse response function
 |      
 |      Parameters
 |      ----------
 |      steps : int, optional
 |          The number of steps for which impulse responses are calculated.
 |          Default is 1. Note that the initial impulse is not counted as a
 |          step, so if `steps=1`, the output will have 2 entries.
 |      impulse : int or array_like
 |          If an integer, the state innovation to pulse; must be between 0
 |          and `k_posdef-1`. Alternatively, a custom impulse vector may be
 |          provided; must be shaped `k_posdef x 1`.
 |      orthogonalized : boolean, optional
 |          Whether or not to perform impulse using orthogonalized innovations.
 |          Note that this will also affect custum `impulse` vectors. Default
 |          is False.
 |      cumulative : boolean, optional
 |          Whether or not to return cumulative impulse responses. Default is
 |          False.
 |      **kwargs
 |          If the model is time-varying and `steps` is greater than the number
 |          of observations, any of the state space representation matrices
 |          that are time-varying must have updated values provided for the
 |          out-of-sample steps.
 |          For example, if `design` is a time-varying component, `nobs` is 10,
 |          and `steps` is 15, a (`k_endog` x `k_states` x 5) matrix must be
 |          provided with the new design matrix values.
 |      
 |      Returns
 |      -------
 |      impulse_responses : array
 |          Responses for each endogenous variable due to the impulse
 |          given by the `impulse` argument. A (steps + 1 x k_endog) array.
 |      
 |      Notes
 |      -----
 |      Intercepts in the measurement and state equation are ignored when
 |      calculating impulse responses.
 |  
 |  pprreeddiicctt(self, start=None, end=None, dynamic=False, **kwargs)
 |      predict(self, start=None, end=None, dynamic=False, **kwargs)
 |      
 |      In-sample prediction and out-of-sample forecasting
 |      
 |      Parameters
 |      ----------
 |      start : int, str, or datetime, optional
 |          Zero-indexed observation number at which to start forecasting,
 |          i.e., the first forecast is start. Can also be a date string to
 |          parse or a datetime type. Default is the the zeroth observation.
 |      end : int, str, or datetime, optional
 |          Zero-indexed observation number at which to end forecasting, i.e.,
 |          the last forecast is end. Can also be a date string to
 |          parse or a datetime type. However, if the dates index does not
 |          have a fixed frequency, end must be an integer index if you
 |          want out of sample prediction. Default is the last observation in
 |          the sample.
 |      dynamic : boolean, int, str, or datetime, optional
 |          Integer offset relative to `start` at which to begin dynamic
 |          prediction. Can also be an absolute date string to parse or a
 |          datetime type (these are not interpreted as offsets).
 |          Prior to this observation, true endogenous values will be used for
 |          prediction; starting with this observation and continuing through
 |          the end of prediction, forecasted endogenous values will be used
 |          instead.
 |      **kwargs
 |          Additional arguments may required for forecasting beyond the end
 |          of the sample. See `FilterResults.predict` for more details.
 |      
 |      Returns
 |      -------
 |      forecast : array
 |          Array of out of in-sample predictions and / or out-of-sample
 |          forecasts. An (npredict x k_endog) array.
 |  
 |  ssiimmuullaattee(self, nsimulations, measurement_shocks=None, state_shocks=None, initial_state=None)
 |      simulate(self, nsimulations, measurement_shocks=None, state_shocks=None, initial_state=None)
 |      
 |      Simulate a new time series following the state space model
 |      
 |      Parameters
 |      ----------
 |      nsimulations : int
 |          The number of observations to simulate. If the model is
 |          time-invariant this can be any number. If the model is
 |          time-varying, then this number must be less than or equal to the
 |          number
 |      measurement_shocks : array_like, optional
 |          If specified, these are the shocks to the measurement equation,
 |          :math:`\varepsilon_t`. If unspecified, these are automatically
 |          generated using a pseudo-random number generator. If specified,
 |          must be shaped `nsimulations` x `k_endog`, where `k_endog` is the
 |          same as in the state space model.
 |      state_shocks : array_like, optional
 |          If specified, these are the shocks to the state equation,
 |          :math:`\eta_t`. If unspecified, these are automatically
 |          generated using a pseudo-random number generator. If specified,
 |          must be shaped `nsimulations` x `k_posdef` where `k_posdef` is the
 |          same as in the state space model.
 |      initial_state : array_like, optional
 |          If specified, this is the state vector at time zero, which should
 |          be shaped (`k_states` x 1), where `k_states` is the same as in the
 |          state space model. If unspecified, but the model has been
 |          initialized, then that initialization is used. If unspecified and
 |          the model has not been initialized, then a vector of zeros is used.
 |          Note that this is not included in the returned `simulated_states`
 |          array.
 |      
 |      Returns
 |      -------
 |      simulated_obs : array
 |          An (nsimulations x k_endog) array of simulated observations.
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from statsmodels.base.wrapper.ResultsWrapper:
 |  
 |  ____ddiirr____(self)
 |      __dir__() -> list
 |      default dir() implementation
 |  
 |  ____ggeettaattttrriibbuuttee____(self, attr)
 |      Return getattr(self, name).
 |  
 |  ____ggeettssttaattee____(self)
 |  
 |  ____iinniitt____(self, results)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  ____sseettssttaattee____(self, dict_)
 |  
 |  ssaavvee(self, fname, remove_data=False)
 |      save a pickle of this instance
 |      
 |      Parameters
 |      ----------
 |      fname : string or filehandle
 |          fname can be a string to a file path or filename, or a filehandle.
 |      remove_data : bool
 |          If False (default), then the instance is pickled without changes.
 |          If True, then all arrays with length nobs are set to None before
 |          pickling. See the remove_data method.
 |          In some cases not all arrays will be set to None.
 |  
 |  ----------------------------------------------------------------------
 |  Class methods inherited from statsmodels.base.wrapper.ResultsWrapper:
 |  
 |  llooaadd(fname) from builtins.type
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from statsmodels.base.wrapper.ResultsWrapper:
 |  
 |  ____ddiicctt____
 |      dictionary for instance variables (if defined)
 |  
 |  ____wweeaakkrreeff____
 |      list of weak references to the object (if defined)
